namespace interface {
    using Element = interface_spec<"Element", std::tuple<>, &attribute_list<"Element">::innerHTML, &attribute_list<"Element">::outerHTML>;
    using GlobalEventHandlers = interface_spec<"GlobalEventHandlers", std::tuple<>, &attribute_list<"GlobalEventHandlers">::onabort, &attribute_list<"GlobalEventHandlers">::onauxclick, &attribute_list<"GlobalEventHandlers">::onbeforeinput, &attribute_list<"GlobalEventHandlers">::onbeforematch, &attribute_list<"GlobalEventHandlers">::onbeforetoggle, &attribute_list<"GlobalEventHandlers">::onblur, &attribute_list<"GlobalEventHandlers">::oncancel, &attribute_list<"GlobalEventHandlers">::oncanplay, &attribute_list<"GlobalEventHandlers">::oncanplaythrough, &attribute_list<"GlobalEventHandlers">::onchange, &attribute_list<"GlobalEventHandlers">::onclick, &attribute_list<"GlobalEventHandlers">::onclose, &attribute_list<"GlobalEventHandlers">::oncontextlost, &attribute_list<"GlobalEventHandlers">::oncontextmenu, &attribute_list<"GlobalEventHandlers">::oncontextrestored, &attribute_list<"GlobalEventHandlers">::oncopy, &attribute_list<"GlobalEventHandlers">::oncuechange, &attribute_list<"GlobalEventHandlers">::oncut, &attribute_list<"GlobalEventHandlers">::ondblclick, &attribute_list<"GlobalEventHandlers">::ondrag, &attribute_list<"GlobalEventHandlers">::ondragend, &attribute_list<"GlobalEventHandlers">::ondragenter, &attribute_list<"GlobalEventHandlers">::ondragleave, &attribute_list<"GlobalEventHandlers">::ondragover, &attribute_list<"GlobalEventHandlers">::ondragstart, &attribute_list<"GlobalEventHandlers">::ondrop, &attribute_list<"GlobalEventHandlers">::ondurationchange, &attribute_list<"GlobalEventHandlers">::onemptied, &attribute_list<"GlobalEventHandlers">::onended, &attribute_list<"GlobalEventHandlers">::onerror, &attribute_list<"GlobalEventHandlers">::onfocus, &attribute_list<"GlobalEventHandlers">::onformdata, &attribute_list<"GlobalEventHandlers">::oninput, &attribute_list<"GlobalEventHandlers">::oninvalid, &attribute_list<"GlobalEventHandlers">::onkeydown, &attribute_list<"GlobalEventHandlers">::onkeypress, &attribute_list<"GlobalEventHandlers">::onkeyup, &attribute_list<"GlobalEventHandlers">::onload, &attribute_list<"GlobalEventHandlers">::onloadeddata, &attribute_list<"GlobalEventHandlers">::onloadedmetadata, &attribute_list<"GlobalEventHandlers">::onloadstart, &attribute_list<"GlobalEventHandlers">::onmousedown, &attribute_list<"GlobalEventHandlers">::onmouseenter, &attribute_list<"GlobalEventHandlers">::onmouseleave, &attribute_list<"GlobalEventHandlers">::onmousemove, &attribute_list<"GlobalEventHandlers">::onmouseout, &attribute_list<"GlobalEventHandlers">::onmouseover, &attribute_list<"GlobalEventHandlers">::onmouseup, &attribute_list<"GlobalEventHandlers">::onpaste, &attribute_list<"GlobalEventHandlers">::onpause, &attribute_list<"GlobalEventHandlers">::onplay, &attribute_list<"GlobalEventHandlers">::onplaying, &attribute_list<"GlobalEventHandlers">::onprogress, &attribute_list<"GlobalEventHandlers">::onratechange, &attribute_list<"GlobalEventHandlers">::onreset, &attribute_list<"GlobalEventHandlers">::onresize, &attribute_list<"GlobalEventHandlers">::onscroll, &attribute_list<"GlobalEventHandlers">::onscrollend, &attribute_list<"GlobalEventHandlers">::onsecuritypolicyviolation, &attribute_list<"GlobalEventHandlers">::onseeked, &attribute_list<"GlobalEventHandlers">::onseeking, &attribute_list<"GlobalEventHandlers">::onselect, &attribute_list<"GlobalEventHandlers">::onslotchange, &attribute_list<"GlobalEventHandlers">::onstalled, &attribute_list<"GlobalEventHandlers">::onsubmit, &attribute_list<"GlobalEventHandlers">::onsuspend, &attribute_list<"GlobalEventHandlers">::ontimeupdate, &attribute_list<"GlobalEventHandlers">::ontoggle, &attribute_list<"GlobalEventHandlers">::onvolumechange, &attribute_list<"GlobalEventHandlers">::onwaiting, &attribute_list<"GlobalEventHandlers">::onwebkitanimationend, &attribute_list<"GlobalEventHandlers">::onwebkitanimationiteration, &attribute_list<"GlobalEventHandlers">::onwebkitanimationstart, &attribute_list<"GlobalEventHandlers">::onwebkittransitionend, &attribute_list<"GlobalEventHandlers">::onwheel>;
    using ElementContentEditable = interface_spec<"ElementContentEditable", std::tuple<>, &attribute_list<"ElementContentEditable">::contentEditable, &attribute_list<"ElementContentEditable">::enterKeyHint, &attribute_list<"ElementContentEditable">::isContentEditable, &attribute_list<"ElementContentEditable">::inputMode>;
    using HTMLOrSVGElement = interface_spec<"HTMLOrSVGElement", std::tuple<>, &attribute_list<"HTMLOrSVGElement">::dataset, &attribute_list<"HTMLOrSVGElement">::nonce, &attribute_list<"HTMLOrSVGElement">::autofocus, &attribute_list<"HTMLOrSVGElement">::tabIndex>;
    using HTMLElement = interface_spec<"HTMLElement", std::tuple<Element, GlobalEventHandlers, ElementContentEditable, HTMLOrSVGElement>, &attribute_list<"HTMLElement">::title, &attribute_list<"HTMLElement">::lang, &attribute_list<"HTMLElement">::translate, &attribute_list<"HTMLElement">::dir, &attribute_list<"HTMLElement">::hidden, &attribute_list<"HTMLElement">::inert, &attribute_list<"HTMLElement">::accessKey, &attribute_list<"HTMLElement">::accessKeyLabel, &attribute_list<"HTMLElement">::draggable, &attribute_list<"HTMLElement">::spellcheck, &attribute_list<"HTMLElement">::writingSuggestions, &attribute_list<"HTMLElement">::autocapitalize, &attribute_list<"HTMLElement">::autocorrect, &attribute_list<"HTMLElement">::innerText, &attribute_list<"HTMLElement">::outerText, &attribute_list<"HTMLElement">::popover>;
    using HTMLHtmlElement = interface_spec<"HTMLHtmlElement", std::tuple<HTMLElement>, &attribute_list<"HTMLHtmlElement">::version>;
    using HTMLHeadElement = interface_spec<"HTMLHeadElement", std::tuple<HTMLElement>>;
    using HTMLTitleElement = interface_spec<"HTMLTitleElement", std::tuple<HTMLElement>, &attribute_list<"HTMLTitleElement">::text>;
    using HTMLBaseElement = interface_spec<"HTMLBaseElement", std::tuple<HTMLElement>, &attribute_list<"HTMLBaseElement">::href, &attribute_list<"HTMLBaseElement">::target>;
    using LinkStyle = interface_spec<"LinkStyle", std::tuple<>>;
    using HTMLLinkElement = interface_spec<"HTMLLinkElement", std::tuple<HTMLElement, LinkStyle>, &attribute_list<"HTMLLinkElement">::href, &attribute_list<"HTMLLinkElement">::crossOrigin, &attribute_list<"HTMLLinkElement">::rel, &attribute_list<"HTMLLinkElement">::as, &attribute_list<"HTMLLinkElement">::relList, &attribute_list<"HTMLLinkElement">::media, &attribute_list<"HTMLLinkElement">::integrity, &attribute_list<"HTMLLinkElement">::hreflang, &attribute_list<"HTMLLinkElement">::type, &attribute_list<"HTMLLinkElement">::sizes, &attribute_list<"HTMLLinkElement">::imageSrcset, &attribute_list<"HTMLLinkElement">::imageSizes, &attribute_list<"HTMLLinkElement">::referrerPolicy, &attribute_list<"HTMLLinkElement">::blocking, &attribute_list<"HTMLLinkElement">::disabled, &attribute_list<"HTMLLinkElement">::fetchPriority, &attribute_list<"HTMLLinkElement">::charset, &attribute_list<"HTMLLinkElement">::rev, &attribute_list<"HTMLLinkElement">::target>;
    using HTMLMetaElement = interface_spec<"HTMLMetaElement", std::tuple<HTMLElement>, &attribute_list<"HTMLMetaElement">::name, &attribute_list<"HTMLMetaElement">::httpEquiv, &attribute_list<"HTMLMetaElement">::content, &attribute_list<"HTMLMetaElement">::media, &attribute_list<"HTMLMetaElement">::scheme>;
    using HTMLStyleElement = interface_spec<"HTMLStyleElement", std::tuple<HTMLElement, LinkStyle>, &attribute_list<"HTMLStyleElement">::disabled, &attribute_list<"HTMLStyleElement">::media, &attribute_list<"HTMLStyleElement">::blocking, &attribute_list<"HTMLStyleElement">::type>;
    using WindowEventHandlers = interface_spec<"WindowEventHandlers", std::tuple<>, &attribute_list<"WindowEventHandlers">::onafterprint, &attribute_list<"WindowEventHandlers">::onbeforeprint, &attribute_list<"WindowEventHandlers">::onbeforeunload, &attribute_list<"WindowEventHandlers">::onhashchange, &attribute_list<"WindowEventHandlers">::onlanguagechange, &attribute_list<"WindowEventHandlers">::onmessage, &attribute_list<"WindowEventHandlers">::onmessageerror, &attribute_list<"WindowEventHandlers">::onoffline, &attribute_list<"WindowEventHandlers">::ononline, &attribute_list<"WindowEventHandlers">::onpagehide, &attribute_list<"WindowEventHandlers">::onpagereveal, &attribute_list<"WindowEventHandlers">::onpageshow, &attribute_list<"WindowEventHandlers">::onpageswap, &attribute_list<"WindowEventHandlers">::onpopstate, &attribute_list<"WindowEventHandlers">::onrejectionhandled, &attribute_list<"WindowEventHandlers">::onstorage, &attribute_list<"WindowEventHandlers">::onunhandledrejection, &attribute_list<"WindowEventHandlers">::onunload>;
    using HTMLBodyElement = interface_spec<"HTMLBodyElement", std::tuple<HTMLElement, WindowEventHandlers>, &attribute_list<"HTMLBodyElement">::text, &attribute_list<"HTMLBodyElement">::link, &attribute_list<"HTMLBodyElement">::vLink, &attribute_list<"HTMLBodyElement">::aLink, &attribute_list<"HTMLBodyElement">::bgColor, &attribute_list<"HTMLBodyElement">::background>;
    using HTMLHeadingElement = interface_spec<"HTMLHeadingElement", std::tuple<HTMLElement>, &attribute_list<"HTMLHeadingElement">::align>;
    using HTMLParagraphElement = interface_spec<"HTMLParagraphElement", std::tuple<HTMLElement>, &attribute_list<"HTMLParagraphElement">::align>;
    using HTMLHRElement = interface_spec<"HTMLHRElement", std::tuple<HTMLElement>, &attribute_list<"HTMLHRElement">::align, &attribute_list<"HTMLHRElement">::color, &attribute_list<"HTMLHRElement">::noShade, &attribute_list<"HTMLHRElement">::size, &attribute_list<"HTMLHRElement">::width>;
    using HTMLPreElement = interface_spec<"HTMLPreElement", std::tuple<HTMLElement>, &attribute_list<"HTMLPreElement">::width>;
    using HTMLQuoteElement = interface_spec<"HTMLQuoteElement", std::tuple<HTMLElement>, &attribute_list<"HTMLQuoteElement">::cite>;
    using HTMLOListElement = interface_spec<"HTMLOListElement", std::tuple<HTMLElement>, &attribute_list<"HTMLOListElement">::reversed, &attribute_list<"HTMLOListElement">::start, &attribute_list<"HTMLOListElement">::type, &attribute_list<"HTMLOListElement">::compact>;
    using HTMLUListElement = interface_spec<"HTMLUListElement", std::tuple<HTMLElement>, &attribute_list<"HTMLUListElement">::compact, &attribute_list<"HTMLUListElement">::type>;
    using HTMLMenuElement = interface_spec<"HTMLMenuElement", std::tuple<HTMLElement>, &attribute_list<"HTMLMenuElement">::compact>;
    using HTMLLIElement = interface_spec<"HTMLLIElement", std::tuple<HTMLElement>, &attribute_list<"HTMLLIElement">::value, &attribute_list<"HTMLLIElement">::type>;
    using HTMLDListElement = interface_spec<"HTMLDListElement", std::tuple<HTMLElement>, &attribute_list<"HTMLDListElement">::compact>;
    using HTMLDivElement = interface_spec<"HTMLDivElement", std::tuple<HTMLElement>, &attribute_list<"HTMLDivElement">::align>;
    using HTMLHyperlinkElementUtils = interface_spec<"HTMLHyperlinkElementUtils", std::tuple<>, &attribute_list<"HTMLHyperlinkElementUtils">::href, &attribute_list<"HTMLHyperlinkElementUtils">::origin, &attribute_list<"HTMLHyperlinkElementUtils">::protocol, &attribute_list<"HTMLHyperlinkElementUtils">::username, &attribute_list<"HTMLHyperlinkElementUtils">::password, &attribute_list<"HTMLHyperlinkElementUtils">::host, &attribute_list<"HTMLHyperlinkElementUtils">::hostname, &attribute_list<"HTMLHyperlinkElementUtils">::port, &attribute_list<"HTMLHyperlinkElementUtils">::pathname, &attribute_list<"HTMLHyperlinkElementUtils">::search, &attribute_list<"HTMLHyperlinkElementUtils">::hash>;
    using HTMLAnchorElement = interface_spec<"HTMLAnchorElement", std::tuple<HTMLElement, HTMLHyperlinkElementUtils>, &attribute_list<"HTMLAnchorElement">::target, &attribute_list<"HTMLAnchorElement">::download, &attribute_list<"HTMLAnchorElement">::ping, &attribute_list<"HTMLAnchorElement">::rel, &attribute_list<"HTMLAnchorElement">::relList, &attribute_list<"HTMLAnchorElement">::hreflang, &attribute_list<"HTMLAnchorElement">::type, &attribute_list<"HTMLAnchorElement">::text, &attribute_list<"HTMLAnchorElement">::referrerPolicy, &attribute_list<"HTMLAnchorElement">::coords, &attribute_list<"HTMLAnchorElement">::charset, &attribute_list<"HTMLAnchorElement">::name, &attribute_list<"HTMLAnchorElement">::rev, &attribute_list<"HTMLAnchorElement">::shape>;
    using HTMLDataElement = interface_spec<"HTMLDataElement", std::tuple<HTMLElement>, &attribute_list<"HTMLDataElement">::value>;
    using HTMLTimeElement = interface_spec<"HTMLTimeElement", std::tuple<HTMLElement>, &attribute_list<"HTMLTimeElement">::dateTime>;
    using HTMLSpanElement = interface_spec<"HTMLSpanElement", std::tuple<HTMLElement>>;
    using HTMLBRElement = interface_spec<"HTMLBRElement", std::tuple<HTMLElement>, &attribute_list<"HTMLBRElement">::clear>;
    using HTMLModElement = interface_spec<"HTMLModElement", std::tuple<HTMLElement>, &attribute_list<"HTMLModElement">::cite, &attribute_list<"HTMLModElement">::dateTime>;
    using HTMLPictureElement = interface_spec<"HTMLPictureElement", std::tuple<HTMLElement>>;
    using HTMLSourceElement = interface_spec<"HTMLSourceElement", std::tuple<HTMLElement>, &attribute_list<"HTMLSourceElement">::src, &attribute_list<"HTMLSourceElement">::type, &attribute_list<"HTMLSourceElement">::srcset, &attribute_list<"HTMLSourceElement">::sizes, &attribute_list<"HTMLSourceElement">::media, &attribute_list<"HTMLSourceElement">::width, &attribute_list<"HTMLSourceElement">::height>;
    using HTMLImageElement = interface_spec<"HTMLImageElement", std::tuple<HTMLElement>, &attribute_list<"HTMLImageElement">::alt, &attribute_list<"HTMLImageElement">::src, &attribute_list<"HTMLImageElement">::srcset, &attribute_list<"HTMLImageElement">::sizes, &attribute_list<"HTMLImageElement">::crossOrigin, &attribute_list<"HTMLImageElement">::useMap, &attribute_list<"HTMLImageElement">::isMap, &attribute_list<"HTMLImageElement">::width, &attribute_list<"HTMLImageElement">::height, &attribute_list<"HTMLImageElement">::naturalWidth, &attribute_list<"HTMLImageElement">::naturalHeight, &attribute_list<"HTMLImageElement">::complete, &attribute_list<"HTMLImageElement">::currentSrc, &attribute_list<"HTMLImageElement">::referrerPolicy, &attribute_list<"HTMLImageElement">::decoding, &attribute_list<"HTMLImageElement">::loading, &attribute_list<"HTMLImageElement">::fetchPriority, &attribute_list<"HTMLImageElement">::name, &attribute_list<"HTMLImageElement">::lowsrc, &attribute_list<"HTMLImageElement">::align, &attribute_list<"HTMLImageElement">::hspace, &attribute_list<"HTMLImageElement">::vspace, &attribute_list<"HTMLImageElement">::longDesc, &attribute_list<"HTMLImageElement">::border>;
    using HTMLIFrameElement = interface_spec<"HTMLIFrameElement", std::tuple<HTMLElement>, &attribute_list<"HTMLIFrameElement">::src, &attribute_list<"HTMLIFrameElement">::srcdoc, &attribute_list<"HTMLIFrameElement">::name, &attribute_list<"HTMLIFrameElement">::sandbox, &attribute_list<"HTMLIFrameElement">::allow, &attribute_list<"HTMLIFrameElement">::allowFullscreen, &attribute_list<"HTMLIFrameElement">::width, &attribute_list<"HTMLIFrameElement">::height, &attribute_list<"HTMLIFrameElement">::referrerPolicy, &attribute_list<"HTMLIFrameElement">::loading, &attribute_list<"HTMLIFrameElement">::contentDocument, &attribute_list<"HTMLIFrameElement">::contentWindow, &attribute_list<"HTMLIFrameElement">::align, &attribute_list<"HTMLIFrameElement">::scrolling, &attribute_list<"HTMLIFrameElement">::frameBorder, &attribute_list<"HTMLIFrameElement">::longDesc, &attribute_list<"HTMLIFrameElement">::marginHeight, &attribute_list<"HTMLIFrameElement">::marginWidth>;
    using HTMLEmbedElement = interface_spec<"HTMLEmbedElement", std::tuple<HTMLElement>, &attribute_list<"HTMLEmbedElement">::src, &attribute_list<"HTMLEmbedElement">::type, &attribute_list<"HTMLEmbedElement">::width, &attribute_list<"HTMLEmbedElement">::height, &attribute_list<"HTMLEmbedElement">::align, &attribute_list<"HTMLEmbedElement">::name>;
    using HTMLObjectElement = interface_spec<"HTMLObjectElement", std::tuple<HTMLElement>, &attribute_list<"HTMLObjectElement">::data, &attribute_list<"HTMLObjectElement">::type, &attribute_list<"HTMLObjectElement">::name, &attribute_list<"HTMLObjectElement">::form, &attribute_list<"HTMLObjectElement">::width, &attribute_list<"HTMLObjectElement">::height, &attribute_list<"HTMLObjectElement">::contentDocument, &attribute_list<"HTMLObjectElement">::contentWindow, &attribute_list<"HTMLObjectElement">::willValidate, &attribute_list<"HTMLObjectElement">::validity, &attribute_list<"HTMLObjectElement">::validationMessage, &attribute_list<"HTMLObjectElement">::align, &attribute_list<"HTMLObjectElement">::archive, &attribute_list<"HTMLObjectElement">::code, &attribute_list<"HTMLObjectElement">::declare, &attribute_list<"HTMLObjectElement">::hspace, &attribute_list<"HTMLObjectElement">::standby, &attribute_list<"HTMLObjectElement">::vspace, &attribute_list<"HTMLObjectElement">::codeBase, &attribute_list<"HTMLObjectElement">::codeType, &attribute_list<"HTMLObjectElement">::useMap, &attribute_list<"HTMLObjectElement">::border>;
    using HTMLMediaElement = interface_spec<"HTMLMediaElement", std::tuple<HTMLElement>, &attribute_list<"HTMLMediaElement">::error, &attribute_list<"HTMLMediaElement">::src, &attribute_list<"HTMLMediaElement">::srcObject, &attribute_list<"HTMLMediaElement">::currentSrc, &attribute_list<"HTMLMediaElement">::crossOrigin, &attribute_list<"HTMLMediaElement">::networkState, &attribute_list<"HTMLMediaElement">::preload, &attribute_list<"HTMLMediaElement">::buffered, &attribute_list<"HTMLMediaElement">::readyState, &attribute_list<"HTMLMediaElement">::seeking, &attribute_list<"HTMLMediaElement">::currentTime, &attribute_list<"HTMLMediaElement">::duration, &attribute_list<"HTMLMediaElement">::paused, &attribute_list<"HTMLMediaElement">::defaultPlaybackRate, &attribute_list<"HTMLMediaElement">::playbackRate, &attribute_list<"HTMLMediaElement">::preservesPitch, &attribute_list<"HTMLMediaElement">::played, &attribute_list<"HTMLMediaElement">::seekable, &attribute_list<"HTMLMediaElement">::ended, &attribute_list<"HTMLMediaElement">::autoplay, &attribute_list<"HTMLMediaElement">::loop, &attribute_list<"HTMLMediaElement">::controls, &attribute_list<"HTMLMediaElement">::volume, &attribute_list<"HTMLMediaElement">::muted, &attribute_list<"HTMLMediaElement">::defaultMuted, &attribute_list<"HTMLMediaElement">::audioTracks, &attribute_list<"HTMLMediaElement">::videoTracks, &attribute_list<"HTMLMediaElement">::textTracks>;
    using HTMLVideoElement = interface_spec<"HTMLVideoElement", std::tuple<HTMLMediaElement>, &attribute_list<"HTMLVideoElement">::width, &attribute_list<"HTMLVideoElement">::height, &attribute_list<"HTMLVideoElement">::videoWidth, &attribute_list<"HTMLVideoElement">::videoHeight, &attribute_list<"HTMLVideoElement">::poster, &attribute_list<"HTMLVideoElement">::playsInline>;
    using HTMLAudioElement = interface_spec<"HTMLAudioElement", std::tuple<HTMLMediaElement>>;
    using HTMLMapElement = interface_spec<"HTMLMapElement", std::tuple<HTMLElement>, &attribute_list<"HTMLMapElement">::name, &attribute_list<"HTMLMapElement">::areas>;
    using HTMLAreaElement = interface_spec<"HTMLAreaElement", std::tuple<HTMLElement, HTMLHyperlinkElementUtils>, &attribute_list<"HTMLAreaElement">::alt, &attribute_list<"HTMLAreaElement">::coords, &attribute_list<"HTMLAreaElement">::shape, &attribute_list<"HTMLAreaElement">::target, &attribute_list<"HTMLAreaElement">::download, &attribute_list<"HTMLAreaElement">::ping, &attribute_list<"HTMLAreaElement">::rel, &attribute_list<"HTMLAreaElement">::relList, &attribute_list<"HTMLAreaElement">::referrerPolicy, &attribute_list<"HTMLAreaElement">::noHref>;
    using HTMLTableElement = interface_spec<"HTMLTableElement", std::tuple<HTMLElement>, &attribute_list<"HTMLTableElement">::caption, &attribute_list<"HTMLTableElement">::tHead, &attribute_list<"HTMLTableElement">::tFoot, &attribute_list<"HTMLTableElement">::tBodies, &attribute_list<"HTMLTableElement">::rows, &attribute_list<"HTMLTableElement">::align, &attribute_list<"HTMLTableElement">::border, &attribute_list<"HTMLTableElement">::frame, &attribute_list<"HTMLTableElement">::rules, &attribute_list<"HTMLTableElement">::summary, &attribute_list<"HTMLTableElement">::width, &attribute_list<"HTMLTableElement">::bgColor, &attribute_list<"HTMLTableElement">::cellPadding, &attribute_list<"HTMLTableElement">::cellSpacing>;
    using HTMLTableCaptionElement = interface_spec<"HTMLTableCaptionElement", std::tuple<HTMLElement>, &attribute_list<"HTMLTableCaptionElement">::align>;
    using HTMLTableColElement = interface_spec<"HTMLTableColElement", std::tuple<HTMLElement>, &attribute_list<"HTMLTableColElement">::span, &attribute_list<"HTMLTableColElement">::align, &attribute_list<"HTMLTableColElement">::ch, &attribute_list<"HTMLTableColElement">::chOff, &attribute_list<"HTMLTableColElement">::vAlign, &attribute_list<"HTMLTableColElement">::width>;
    using HTMLTableSectionElement = interface_spec<"HTMLTableSectionElement", std::tuple<HTMLElement>, &attribute_list<"HTMLTableSectionElement">::rows, &attribute_list<"HTMLTableSectionElement">::align, &attribute_list<"HTMLTableSectionElement">::ch, &attribute_list<"HTMLTableSectionElement">::chOff, &attribute_list<"HTMLTableSectionElement">::vAlign>;
    using HTMLTableRowElement = interface_spec<"HTMLTableRowElement", std::tuple<HTMLElement>, &attribute_list<"HTMLTableRowElement">::rowIndex, &attribute_list<"HTMLTableRowElement">::sectionRowIndex, &attribute_list<"HTMLTableRowElement">::cells, &attribute_list<"HTMLTableRowElement">::align, &attribute_list<"HTMLTableRowElement">::ch, &attribute_list<"HTMLTableRowElement">::chOff, &attribute_list<"HTMLTableRowElement">::vAlign, &attribute_list<"HTMLTableRowElement">::bgColor>;
    using HTMLTableCellElement = interface_spec<"HTMLTableCellElement", std::tuple<HTMLElement>, &attribute_list<"HTMLTableCellElement">::colSpan, &attribute_list<"HTMLTableCellElement">::rowSpan, &attribute_list<"HTMLTableCellElement">::headers, &attribute_list<"HTMLTableCellElement">::cellIndex, &attribute_list<"HTMLTableCellElement">::scope, &attribute_list<"HTMLTableCellElement">::abbr, &attribute_list<"HTMLTableCellElement">::align, &attribute_list<"HTMLTableCellElement">::axis, &attribute_list<"HTMLTableCellElement">::height, &attribute_list<"HTMLTableCellElement">::width, &attribute_list<"HTMLTableCellElement">::ch, &attribute_list<"HTMLTableCellElement">::chOff, &attribute_list<"HTMLTableCellElement">::noWrap, &attribute_list<"HTMLTableCellElement">::vAlign, &attribute_list<"HTMLTableCellElement">::bgColor>;
    using HTMLFormElement = interface_spec<"HTMLFormElement", std::tuple<HTMLElement>, &attribute_list<"HTMLFormElement">::acceptCharset, &attribute_list<"HTMLFormElement">::action, &attribute_list<"HTMLFormElement">::autocomplete, &attribute_list<"HTMLFormElement">::enctype, &attribute_list<"HTMLFormElement">::encoding, &attribute_list<"HTMLFormElement">::method, &attribute_list<"HTMLFormElement">::name, &attribute_list<"HTMLFormElement">::noValidate, &attribute_list<"HTMLFormElement">::target, &attribute_list<"HTMLFormElement">::rel, &attribute_list<"HTMLFormElement">::relList, &attribute_list<"HTMLFormElement">::elements, &attribute_list<"HTMLFormElement">::length>;
    using HTMLLabelElement = interface_spec<"HTMLLabelElement", std::tuple<HTMLElement>, &attribute_list<"HTMLLabelElement">::form, &attribute_list<"HTMLLabelElement">::htmlFor, &attribute_list<"HTMLLabelElement">::control>;
    using PopoverInvokerElement = interface_spec<"PopoverInvokerElement", std::tuple<>, &attribute_list<"PopoverInvokerElement">::popoverTargetElement, &attribute_list<"PopoverInvokerElement">::popoverTargetAction>;
    using HTMLInputElement = interface_spec<"HTMLInputElement", std::tuple<HTMLElement, PopoverInvokerElement>, &attribute_list<"HTMLInputElement">::accept, &attribute_list<"HTMLInputElement">::alpha, &attribute_list<"HTMLInputElement">::alt, &attribute_list<"HTMLInputElement">::autocomplete, &attribute_list<"HTMLInputElement">::defaultChecked, &attribute_list<"HTMLInputElement">::checked, &attribute_list<"HTMLInputElement">::colorSpace, &attribute_list<"HTMLInputElement">::dirName, &attribute_list<"HTMLInputElement">::disabled, &attribute_list<"HTMLInputElement">::form, &attribute_list<"HTMLInputElement">::files, &attribute_list<"HTMLInputElement">::formAction, &attribute_list<"HTMLInputElement">::formEnctype, &attribute_list<"HTMLInputElement">::formMethod, &attribute_list<"HTMLInputElement">::formNoValidate, &attribute_list<"HTMLInputElement">::formTarget, &attribute_list<"HTMLInputElement">::height, &attribute_list<"HTMLInputElement">::indeterminate, &attribute_list<"HTMLInputElement">::list, &attribute_list<"HTMLInputElement">::max, &attribute_list<"HTMLInputElement">::maxLength, &attribute_list<"HTMLInputElement">::min, &attribute_list<"HTMLInputElement">::minLength, &attribute_list<"HTMLInputElement">::multiple, &attribute_list<"HTMLInputElement">::name, &attribute_list<"HTMLInputElement">::pattern, &attribute_list<"HTMLInputElement">::placeholder, &attribute_list<"HTMLInputElement">::readOnly, &attribute_list<"HTMLInputElement">::required, &attribute_list<"HTMLInputElement">::size, &attribute_list<"HTMLInputElement">::src, &attribute_list<"HTMLInputElement">::step, &attribute_list<"HTMLInputElement">::type, &attribute_list<"HTMLInputElement">::defaultValue, &attribute_list<"HTMLInputElement">::value, &attribute_list<"HTMLInputElement">::valueAsDate, &attribute_list<"HTMLInputElement">::valueAsNumber, &attribute_list<"HTMLInputElement">::width, &attribute_list<"HTMLInputElement">::willValidate, &attribute_list<"HTMLInputElement">::validity, &attribute_list<"HTMLInputElement">::validationMessage, &attribute_list<"HTMLInputElement">::labels, &attribute_list<"HTMLInputElement">::selectionStart, &attribute_list<"HTMLInputElement">::selectionEnd, &attribute_list<"HTMLInputElement">::selectionDirection, &attribute_list<"HTMLInputElement">::align, &attribute_list<"HTMLInputElement">::useMap>;
    using HTMLButtonElement = interface_spec<"HTMLButtonElement", std::tuple<HTMLElement, PopoverInvokerElement>, &attribute_list<"HTMLButtonElement">::disabled, &attribute_list<"HTMLButtonElement">::form, &attribute_list<"HTMLButtonElement">::formAction, &attribute_list<"HTMLButtonElement">::formEnctype, &attribute_list<"HTMLButtonElement">::formMethod, &attribute_list<"HTMLButtonElement">::formNoValidate, &attribute_list<"HTMLButtonElement">::formTarget, &attribute_list<"HTMLButtonElement">::name, &attribute_list<"HTMLButtonElement">::type, &attribute_list<"HTMLButtonElement">::value, &attribute_list<"HTMLButtonElement">::willValidate, &attribute_list<"HTMLButtonElement">::validity, &attribute_list<"HTMLButtonElement">::validationMessage, &attribute_list<"HTMLButtonElement">::labels>;
    using HTMLSelectElement = interface_spec<"HTMLSelectElement", std::tuple<HTMLElement>, &attribute_list<"HTMLSelectElement">::autocomplete, &attribute_list<"HTMLSelectElement">::disabled, &attribute_list<"HTMLSelectElement">::form, &attribute_list<"HTMLSelectElement">::multiple, &attribute_list<"HTMLSelectElement">::name, &attribute_list<"HTMLSelectElement">::required, &attribute_list<"HTMLSelectElement">::size, &attribute_list<"HTMLSelectElement">::type, &attribute_list<"HTMLSelectElement">::options, &attribute_list<"HTMLSelectElement">::length, &attribute_list<"HTMLSelectElement">::selectedOptions, &attribute_list<"HTMLSelectElement">::selectedIndex, &attribute_list<"HTMLSelectElement">::value, &attribute_list<"HTMLSelectElement">::willValidate, &attribute_list<"HTMLSelectElement">::validity, &attribute_list<"HTMLSelectElement">::validationMessage, &attribute_list<"HTMLSelectElement">::labels>;
    using HTMLDataListElement = interface_spec<"HTMLDataListElement", std::tuple<HTMLElement>, &attribute_list<"HTMLDataListElement">::options>;
    using HTMLOptGroupElement = interface_spec<"HTMLOptGroupElement", std::tuple<HTMLElement>, &attribute_list<"HTMLOptGroupElement">::disabled, &attribute_list<"HTMLOptGroupElement">::label>;
    using HTMLOptionElement = interface_spec<"HTMLOptionElement", std::tuple<HTMLElement>, &attribute_list<"HTMLOptionElement">::disabled, &attribute_list<"HTMLOptionElement">::form, &attribute_list<"HTMLOptionElement">::label, &attribute_list<"HTMLOptionElement">::defaultSelected, &attribute_list<"HTMLOptionElement">::selected, &attribute_list<"HTMLOptionElement">::value, &attribute_list<"HTMLOptionElement">::text, &attribute_list<"HTMLOptionElement">::index>;
    using HTMLTextAreaElement = interface_spec<"HTMLTextAreaElement", std::tuple<HTMLElement>, &attribute_list<"HTMLTextAreaElement">::autocomplete, &attribute_list<"HTMLTextAreaElement">::cols, &attribute_list<"HTMLTextAreaElement">::dirName, &attribute_list<"HTMLTextAreaElement">::disabled, &attribute_list<"HTMLTextAreaElement">::form, &attribute_list<"HTMLTextAreaElement">::maxLength, &attribute_list<"HTMLTextAreaElement">::minLength, &attribute_list<"HTMLTextAreaElement">::name, &attribute_list<"HTMLTextAreaElement">::placeholder, &attribute_list<"HTMLTextAreaElement">::readOnly, &attribute_list<"HTMLTextAreaElement">::required, &attribute_list<"HTMLTextAreaElement">::rows, &attribute_list<"HTMLTextAreaElement">::wrap, &attribute_list<"HTMLTextAreaElement">::type, &attribute_list<"HTMLTextAreaElement">::defaultValue, &attribute_list<"HTMLTextAreaElement">::value, &attribute_list<"HTMLTextAreaElement">::textLength, &attribute_list<"HTMLTextAreaElement">::willValidate, &attribute_list<"HTMLTextAreaElement">::validity, &attribute_list<"HTMLTextAreaElement">::validationMessage, &attribute_list<"HTMLTextAreaElement">::labels, &attribute_list<"HTMLTextAreaElement">::selectionStart, &attribute_list<"HTMLTextAreaElement">::selectionEnd, &attribute_list<"HTMLTextAreaElement">::selectionDirection>;
    using HTMLOutputElement = interface_spec<"HTMLOutputElement", std::tuple<HTMLElement>, &attribute_list<"HTMLOutputElement">::htmlFor, &attribute_list<"HTMLOutputElement">::form, &attribute_list<"HTMLOutputElement">::name, &attribute_list<"HTMLOutputElement">::type, &attribute_list<"HTMLOutputElement">::defaultValue, &attribute_list<"HTMLOutputElement">::value, &attribute_list<"HTMLOutputElement">::willValidate, &attribute_list<"HTMLOutputElement">::validity, &attribute_list<"HTMLOutputElement">::validationMessage, &attribute_list<"HTMLOutputElement">::labels>;
    using HTMLProgressElement = interface_spec<"HTMLProgressElement", std::tuple<HTMLElement>, &attribute_list<"HTMLProgressElement">::value, &attribute_list<"HTMLProgressElement">::max, &attribute_list<"HTMLProgressElement">::position, &attribute_list<"HTMLProgressElement">::labels>;
    using HTMLMeterElement = interface_spec<"HTMLMeterElement", std::tuple<HTMLElement>, &attribute_list<"HTMLMeterElement">::value, &attribute_list<"HTMLMeterElement">::min, &attribute_list<"HTMLMeterElement">::max, &attribute_list<"HTMLMeterElement">::low, &attribute_list<"HTMLMeterElement">::high, &attribute_list<"HTMLMeterElement">::optimum, &attribute_list<"HTMLMeterElement">::labels>;
    using HTMLFieldSetElement = interface_spec<"HTMLFieldSetElement", std::tuple<HTMLElement>, &attribute_list<"HTMLFieldSetElement">::disabled, &attribute_list<"HTMLFieldSetElement">::form, &attribute_list<"HTMLFieldSetElement">::name, &attribute_list<"HTMLFieldSetElement">::type, &attribute_list<"HTMLFieldSetElement">::elements, &attribute_list<"HTMLFieldSetElement">::willValidate, &attribute_list<"HTMLFieldSetElement">::validity, &attribute_list<"HTMLFieldSetElement">::validationMessage>;
    using HTMLLegendElement = interface_spec<"HTMLLegendElement", std::tuple<HTMLElement>, &attribute_list<"HTMLLegendElement">::form, &attribute_list<"HTMLLegendElement">::align>;
    using HTMLDetailsElement = interface_spec<"HTMLDetailsElement", std::tuple<HTMLElement>, &attribute_list<"HTMLDetailsElement">::name, &attribute_list<"HTMLDetailsElement">::open>;
    using HTMLDialogElement = interface_spec<"HTMLDialogElement", std::tuple<HTMLElement>, &attribute_list<"HTMLDialogElement">::open, &attribute_list<"HTMLDialogElement">::returnValue>;
    using HTMLScriptElement = interface_spec<"HTMLScriptElement", std::tuple<HTMLElement>, &attribute_list<"HTMLScriptElement">::src, &attribute_list<"HTMLScriptElement">::type, &attribute_list<"HTMLScriptElement">::noModule, &attribute_list<"HTMLScriptElement">::async, &attribute_list<"HTMLScriptElement">::defer, &attribute_list<"HTMLScriptElement">::crossOrigin, &attribute_list<"HTMLScriptElement">::text, &attribute_list<"HTMLScriptElement">::integrity, &attribute_list<"HTMLScriptElement">::referrerPolicy, &attribute_list<"HTMLScriptElement">::blocking, &attribute_list<"HTMLScriptElement">::fetchPriority, &attribute_list<"HTMLScriptElement">::charset, &attribute_list<"HTMLScriptElement">::event, &attribute_list<"HTMLScriptElement">::htmlFor>;
    using HTMLSlotElement = interface_spec<"HTMLSlotElement", std::tuple<HTMLElement>, &attribute_list<"HTMLSlotElement">::name>;
    using HTMLCanvasElement = interface_spec<"HTMLCanvasElement", std::tuple<HTMLElement>, &attribute_list<"HTMLCanvasElement">::width, &attribute_list<"HTMLCanvasElement">::height>;
    using HTMLUnknownElement = interface_spec<"HTMLUnknownElement", std::tuple<HTMLElement>>;
    using HTMLDirectoryElement = interface_spec<"HTMLDirectoryElement", std::tuple<HTMLElement>, &attribute_list<"HTMLDirectoryElement">::compact>;
    using HTMLFrameElement = interface_spec<"HTMLFrameElement", std::tuple<HTMLElement>, &attribute_list<"HTMLFrameElement">::name, &attribute_list<"HTMLFrameElement">::scrolling, &attribute_list<"HTMLFrameElement">::src, &attribute_list<"HTMLFrameElement">::frameBorder, &attribute_list<"HTMLFrameElement">::longDesc, &attribute_list<"HTMLFrameElement">::noResize, &attribute_list<"HTMLFrameElement">::contentDocument, &attribute_list<"HTMLFrameElement">::contentWindow, &attribute_list<"HTMLFrameElement">::marginHeight, &attribute_list<"HTMLFrameElement">::marginWidth>;
    using HTMLFrameSetElement = interface_spec<"HTMLFrameSetElement", std::tuple<HTMLElement, WindowEventHandlers>, &attribute_list<"HTMLFrameSetElement">::cols, &attribute_list<"HTMLFrameSetElement">::rows>;
    using HTMLParamElement = interface_spec<"HTMLParamElement", std::tuple<HTMLElement>, &attribute_list<"HTMLParamElement">::name, &attribute_list<"HTMLParamElement">::value, &attribute_list<"HTMLParamElement">::type, &attribute_list<"HTMLParamElement">::valueType>;
    using HTMLFontElement = interface_spec<"HTMLFontElement", std::tuple<HTMLElement>, &attribute_list<"HTMLFontElement">::color, &attribute_list<"HTMLFontElement">::face, &attribute_list<"HTMLFontElement">::size>;
    using HTMLMarqueeElement = interface_spec<"HTMLMarqueeElement", std::tuple<HTMLElement>, &attribute_list<"HTMLMarqueeElement">::behavior, &attribute_list<"HTMLMarqueeElement">::bgColor, &attribute_list<"HTMLMarqueeElement">::direction, &attribute_list<"HTMLMarqueeElement">::height, &attribute_list<"HTMLMarqueeElement">::hspace, &attribute_list<"HTMLMarqueeElement">::loop, &attribute_list<"HTMLMarqueeElement">::scrollAmount, &attribute_list<"HTMLMarqueeElement">::scrollDelay, &attribute_list<"HTMLMarqueeElement">::trueSpeed, &attribute_list<"HTMLMarqueeElement">::vspace, &attribute_list<"HTMLMarqueeElement">::width>;
}
