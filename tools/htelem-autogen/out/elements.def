template <class ...Aspects> struct article: public element<"article", ::ht::interface::HTMLElement, Aspects...> {
    using element<"article", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> article(Aspects&&...) -> article<Aspects...>;

template <class ...Aspects> struct section: public element<"section", ::ht::interface::HTMLElement, Aspects...> {
    using element<"section", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> section(Aspects&&...) -> section<Aspects...>;

template <class ...Aspects> struct nav: public element<"nav", ::ht::interface::HTMLElement, Aspects...> {
    using element<"nav", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> nav(Aspects&&...) -> nav<Aspects...>;

template <class ...Aspects> struct aside: public element<"aside", ::ht::interface::HTMLElement, Aspects...> {
    using element<"aside", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> aside(Aspects&&...) -> aside<Aspects...>;

template <class ...Aspects> struct hgroup: public element<"hgroup", ::ht::interface::HTMLElement, Aspects...> {
    using element<"hgroup", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> hgroup(Aspects&&...) -> hgroup<Aspects...>;

template <class ...Aspects> struct header: public element<"header", ::ht::interface::HTMLElement, Aspects...> {
    using element<"header", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> header(Aspects&&...) -> header<Aspects...>;

template <class ...Aspects> struct footer: public element<"footer", ::ht::interface::HTMLElement, Aspects...> {
    using element<"footer", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> footer(Aspects&&...) -> footer<Aspects...>;

template <class ...Aspects> struct address: public element<"address", ::ht::interface::HTMLElement, Aspects...> {
    using element<"address", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> address(Aspects&&...) -> address<Aspects...>;

template <class ...Aspects> struct dt: public element<"dt", ::ht::interface::HTMLElement, Aspects...> {
    using element<"dt", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> dt(Aspects&&...) -> dt<Aspects...>;

template <class ...Aspects> struct dd: public element<"dd", ::ht::interface::HTMLElement, Aspects...> {
    using element<"dd", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> dd(Aspects&&...) -> dd<Aspects...>;

template <class ...Aspects> struct figure: public element<"figure", ::ht::interface::HTMLElement, Aspects...> {
    using element<"figure", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> figure(Aspects&&...) -> figure<Aspects...>;

template <class ...Aspects> struct figcaption: public element<"figcaption", ::ht::interface::HTMLElement, Aspects...> {
    using element<"figcaption", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> figcaption(Aspects&&...) -> figcaption<Aspects...>;

template <class ...Aspects> struct main: public element<"main", ::ht::interface::HTMLElement, Aspects...> {
    using element<"main", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> main(Aspects&&...) -> main<Aspects...>;

template <class ...Aspects> struct search: public element<"search", ::ht::interface::HTMLElement, Aspects...> {
    using element<"search", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> search(Aspects&&...) -> search<Aspects...>;

template <class ...Aspects> struct em: public element<"em", ::ht::interface::HTMLElement, Aspects...> {
    using element<"em", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> em(Aspects&&...) -> em<Aspects...>;

template <class ...Aspects> struct strong: public element<"strong", ::ht::interface::HTMLElement, Aspects...> {
    using element<"strong", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> strong(Aspects&&...) -> strong<Aspects...>;

template <class ...Aspects> struct small: public element<"small", ::ht::interface::HTMLElement, Aspects...> {
    using element<"small", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> small(Aspects&&...) -> small<Aspects...>;

template <class ...Aspects> struct s: public element<"s", ::ht::interface::HTMLElement, Aspects...> {
    using element<"s", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> s(Aspects&&...) -> s<Aspects...>;

template <class ...Aspects> struct cite: public element<"cite", ::ht::interface::HTMLElement, Aspects...> {
    using element<"cite", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> cite(Aspects&&...) -> cite<Aspects...>;

template <class ...Aspects> struct dfn: public element<"dfn", ::ht::interface::HTMLElement, Aspects...> {
    using element<"dfn", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> dfn(Aspects&&...) -> dfn<Aspects...>;

template <class ...Aspects> struct abbr: public element<"abbr", ::ht::interface::HTMLElement, Aspects...> {
    using element<"abbr", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> abbr(Aspects&&...) -> abbr<Aspects...>;

template <class ...Aspects> struct ruby: public element<"ruby", ::ht::interface::HTMLElement, Aspects...> {
    using element<"ruby", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> ruby(Aspects&&...) -> ruby<Aspects...>;

template <class ...Aspects> struct rt: public element<"rt", ::ht::interface::HTMLElement, Aspects...> {
    using element<"rt", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> rt(Aspects&&...) -> rt<Aspects...>;

template <class ...Aspects> struct rp: public element<"rp", ::ht::interface::HTMLElement, Aspects...> {
    using element<"rp", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> rp(Aspects&&...) -> rp<Aspects...>;

template <class ...Aspects> struct code: public element<"code", ::ht::interface::HTMLElement, Aspects...> {
    using element<"code", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> code(Aspects&&...) -> code<Aspects...>;

template <class ...Aspects> struct var: public element<"var", ::ht::interface::HTMLElement, Aspects...> {
    using element<"var", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> var(Aspects&&...) -> var<Aspects...>;

template <class ...Aspects> struct samp: public element<"samp", ::ht::interface::HTMLElement, Aspects...> {
    using element<"samp", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> samp(Aspects&&...) -> samp<Aspects...>;

template <class ...Aspects> struct kbd: public element<"kbd", ::ht::interface::HTMLElement, Aspects...> {
    using element<"kbd", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> kbd(Aspects&&...) -> kbd<Aspects...>;

template <class ...Aspects> struct sub: public element<"sub", ::ht::interface::HTMLElement, Aspects...> {
    using element<"sub", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> sub(Aspects&&...) -> sub<Aspects...>;

template <class ...Aspects> struct sup: public element<"sup", ::ht::interface::HTMLElement, Aspects...> {
    using element<"sup", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> sup(Aspects&&...) -> sup<Aspects...>;

template <class ...Aspects> struct i: public element<"i", ::ht::interface::HTMLElement, Aspects...> {
    using element<"i", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> i(Aspects&&...) -> i<Aspects...>;

template <class ...Aspects> struct b: public element<"b", ::ht::interface::HTMLElement, Aspects...> {
    using element<"b", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> b(Aspects&&...) -> b<Aspects...>;

template <class ...Aspects> struct u: public element<"u", ::ht::interface::HTMLElement, Aspects...> {
    using element<"u", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> u(Aspects&&...) -> u<Aspects...>;

template <class ...Aspects> struct mark: public element<"mark", ::ht::interface::HTMLElement, Aspects...> {
    using element<"mark", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> mark(Aspects&&...) -> mark<Aspects...>;

template <class ...Aspects> struct bdi: public element<"bdi", ::ht::interface::HTMLElement, Aspects...> {
    using element<"bdi", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> bdi(Aspects&&...) -> bdi<Aspects...>;

template <class ...Aspects> struct bdo: public element<"bdo", ::ht::interface::HTMLElement, Aspects...> {
    using element<"bdo", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> bdo(Aspects&&...) -> bdo<Aspects...>;

template <class ...Aspects> struct wbr: public element<"wbr", ::ht::interface::HTMLElement, Aspects...> {
    using element<"wbr", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> wbr(Aspects&&...) -> wbr<Aspects...>;

template <class ...Aspects> struct summary: public element<"summary", ::ht::interface::HTMLElement, Aspects...> {
    using element<"summary", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> summary(Aspects&&...) -> summary<Aspects...>;

template <class ...Aspects> struct noscript: public element<"noscript", ::ht::interface::HTMLElement, Aspects...> {
    using element<"noscript", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> noscript(Aspects&&...) -> noscript<Aspects...>;

template <class ...Aspects> struct acronym: public element<"acronym", ::ht::interface::HTMLElement, Aspects...> {
    using element<"acronym", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> acronym(Aspects&&...) -> acronym<Aspects...>;

template <class ...Aspects> struct noframes: public element<"noframes", ::ht::interface::HTMLElement, Aspects...> {
    using element<"noframes", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> noframes(Aspects&&...) -> noframes<Aspects...>;

template <class ...Aspects> struct menuitem: public element<"menuitem", ::ht::interface::HTMLElement, Aspects...> {
    using element<"menuitem", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> menuitem(Aspects&&...) -> menuitem<Aspects...>;

template <class ...Aspects> struct noembed: public element<"noembed", ::ht::interface::HTMLElement, Aspects...> {
    using element<"noembed", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> noembed(Aspects&&...) -> noembed<Aspects...>;

template <class ...Aspects> struct plaintext: public element<"plaintext", ::ht::interface::HTMLElement, Aspects...> {
    using element<"plaintext", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> plaintext(Aspects&&...) -> plaintext<Aspects...>;

template <class ...Aspects> struct rb: public element<"rb", ::ht::interface::HTMLElement, Aspects...> {
    using element<"rb", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> rb(Aspects&&...) -> rb<Aspects...>;

template <class ...Aspects> struct rtc: public element<"rtc", ::ht::interface::HTMLElement, Aspects...> {
    using element<"rtc", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> rtc(Aspects&&...) -> rtc<Aspects...>;

template <class ...Aspects> struct strike: public element<"strike", ::ht::interface::HTMLElement, Aspects...> {
    using element<"strike", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> strike(Aspects&&...) -> strike<Aspects...>;

template <class ...Aspects> struct basefont: public element<"basefont", ::ht::interface::HTMLElement, Aspects...> {
    using element<"basefont", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> basefont(Aspects&&...) -> basefont<Aspects...>;

template <class ...Aspects> struct big: public element<"big", ::ht::interface::HTMLElement, Aspects...> {
    using element<"big", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> big(Aspects&&...) -> big<Aspects...>;

template <class ...Aspects> struct center: public element<"center", ::ht::interface::HTMLElement, Aspects...> {
    using element<"center", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> center(Aspects&&...) -> center<Aspects...>;

template <class ...Aspects> struct nobr: public element<"nobr", ::ht::interface::HTMLElement, Aspects...> {
    using element<"nobr", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> nobr(Aspects&&...) -> nobr<Aspects...>;

template <class ...Aspects> struct tt: public element<"tt", ::ht::interface::HTMLElement, Aspects...> {
    using element<"tt", ::ht::interface::HTMLElement, Aspects...>::element;
};
template <class ...Aspects> tt(Aspects&&...) -> tt<Aspects...>;

template <class ...Aspects> struct html: public element<"html", ::ht::interface::HTMLHtmlElement, Aspects...> {
    using element<"html", ::ht::interface::HTMLHtmlElement, Aspects...>::element;
};
template <class ...Aspects> html(Aspects&&...) -> html<Aspects...>;

template <class ...Aspects> struct head: public element<"head", ::ht::interface::HTMLHeadElement, Aspects...> {
    using element<"head", ::ht::interface::HTMLHeadElement, Aspects...>::element;
};
template <class ...Aspects> head(Aspects&&...) -> head<Aspects...>;

template <class ...Aspects> struct title: public element<"title", ::ht::interface::HTMLTitleElement, Aspects...> {
    using element<"title", ::ht::interface::HTMLTitleElement, Aspects...>::element;
};
template <class ...Aspects> title(Aspects&&...) -> title<Aspects...>;

template <class ...Aspects> struct base: public element<"base", ::ht::interface::HTMLBaseElement, Aspects...> {
    using element<"base", ::ht::interface::HTMLBaseElement, Aspects...>::element;
};
template <class ...Aspects> base(Aspects&&...) -> base<Aspects...>;

template <class ...Aspects> struct link: public element<"link", ::ht::interface::HTMLLinkElement, Aspects...> {
    using element<"link", ::ht::interface::HTMLLinkElement, Aspects...>::element;
};
template <class ...Aspects> link(Aspects&&...) -> link<Aspects...>;

template <class ...Aspects> struct meta: public element<"meta", ::ht::interface::HTMLMetaElement, Aspects...> {
    using element<"meta", ::ht::interface::HTMLMetaElement, Aspects...>::element;
};
template <class ...Aspects> meta(Aspects&&...) -> meta<Aspects...>;

template <class ...Aspects> struct style: public element<"style", ::ht::interface::HTMLStyleElement, Aspects...> {
    using element<"style", ::ht::interface::HTMLStyleElement, Aspects...>::element;
};
template <class ...Aspects> style(Aspects&&...) -> style<Aspects...>;

template <class ...Aspects> struct body: public element<"body", ::ht::interface::HTMLBodyElement, Aspects...> {
    using element<"body", ::ht::interface::HTMLBodyElement, Aspects...>::element;
};
template <class ...Aspects> body(Aspects&&...) -> body<Aspects...>;

template <class ...Aspects> struct h1: public element<"h1", ::ht::interface::HTMLHeadingElement, Aspects...> {
    using element<"h1", ::ht::interface::HTMLHeadingElement, Aspects...>::element;
};
template <class ...Aspects> h1(Aspects&&...) -> h1<Aspects...>;

template <class ...Aspects> struct h2: public element<"h2", ::ht::interface::HTMLHeadingElement, Aspects...> {
    using element<"h2", ::ht::interface::HTMLHeadingElement, Aspects...>::element;
};
template <class ...Aspects> h2(Aspects&&...) -> h2<Aspects...>;

template <class ...Aspects> struct h3: public element<"h3", ::ht::interface::HTMLHeadingElement, Aspects...> {
    using element<"h3", ::ht::interface::HTMLHeadingElement, Aspects...>::element;
};
template <class ...Aspects> h3(Aspects&&...) -> h3<Aspects...>;

template <class ...Aspects> struct h4: public element<"h4", ::ht::interface::HTMLHeadingElement, Aspects...> {
    using element<"h4", ::ht::interface::HTMLHeadingElement, Aspects...>::element;
};
template <class ...Aspects> h4(Aspects&&...) -> h4<Aspects...>;

template <class ...Aspects> struct h5: public element<"h5", ::ht::interface::HTMLHeadingElement, Aspects...> {
    using element<"h5", ::ht::interface::HTMLHeadingElement, Aspects...>::element;
};
template <class ...Aspects> h5(Aspects&&...) -> h5<Aspects...>;

template <class ...Aspects> struct h6: public element<"h6", ::ht::interface::HTMLHeadingElement, Aspects...> {
    using element<"h6", ::ht::interface::HTMLHeadingElement, Aspects...>::element;
};
template <class ...Aspects> h6(Aspects&&...) -> h6<Aspects...>;

template <class ...Aspects> struct p: public element<"p", ::ht::interface::HTMLParagraphElement, Aspects...> {
    using element<"p", ::ht::interface::HTMLParagraphElement, Aspects...>::element;
};
template <class ...Aspects> p(Aspects&&...) -> p<Aspects...>;

template <class ...Aspects> struct hr: public element<"hr", ::ht::interface::HTMLHRElement, Aspects...> {
    using element<"hr", ::ht::interface::HTMLHRElement, Aspects...>::element;
};
template <class ...Aspects> hr(Aspects&&...) -> hr<Aspects...>;

template <class ...Aspects> struct pre: public element<"pre", ::ht::interface::HTMLPreElement, Aspects...> {
    using element<"pre", ::ht::interface::HTMLPreElement, Aspects...>::element;
};
template <class ...Aspects> pre(Aspects&&...) -> pre<Aspects...>;

template <class ...Aspects> struct listing: public element<"listing", ::ht::interface::HTMLPreElement, Aspects...> {
    using element<"listing", ::ht::interface::HTMLPreElement, Aspects...>::element;
};
template <class ...Aspects> listing(Aspects&&...) -> listing<Aspects...>;

template <class ...Aspects> struct xmp: public element<"xmp", ::ht::interface::HTMLPreElement, Aspects...> {
    using element<"xmp", ::ht::interface::HTMLPreElement, Aspects...>::element;
};
template <class ...Aspects> xmp(Aspects&&...) -> xmp<Aspects...>;

template <class ...Aspects> struct blockquote: public element<"blockquote", ::ht::interface::HTMLQuoteElement, Aspects...> {
    using element<"blockquote", ::ht::interface::HTMLQuoteElement, Aspects...>::element;
};
template <class ...Aspects> blockquote(Aspects&&...) -> blockquote<Aspects...>;

template <class ...Aspects> struct q: public element<"q", ::ht::interface::HTMLQuoteElement, Aspects...> {
    using element<"q", ::ht::interface::HTMLQuoteElement, Aspects...>::element;
};
template <class ...Aspects> q(Aspects&&...) -> q<Aspects...>;

template <class ...Aspects> struct ol: public element<"ol", ::ht::interface::HTMLOListElement, Aspects...> {
    using element<"ol", ::ht::interface::HTMLOListElement, Aspects...>::element;
};
template <class ...Aspects> ol(Aspects&&...) -> ol<Aspects...>;

template <class ...Aspects> struct ul: public element<"ul", ::ht::interface::HTMLUListElement, Aspects...> {
    using element<"ul", ::ht::interface::HTMLUListElement, Aspects...>::element;
};
template <class ...Aspects> ul(Aspects&&...) -> ul<Aspects...>;

template <class ...Aspects> struct menu: public element<"menu", ::ht::interface::HTMLMenuElement, Aspects...> {
    using element<"menu", ::ht::interface::HTMLMenuElement, Aspects...>::element;
};
template <class ...Aspects> menu(Aspects&&...) -> menu<Aspects...>;

template <class ...Aspects> struct li: public element<"li", ::ht::interface::HTMLLIElement, Aspects...> {
    using element<"li", ::ht::interface::HTMLLIElement, Aspects...>::element;
};
template <class ...Aspects> li(Aspects&&...) -> li<Aspects...>;

template <class ...Aspects> struct dl: public element<"dl", ::ht::interface::HTMLDListElement, Aspects...> {
    using element<"dl", ::ht::interface::HTMLDListElement, Aspects...>::element;
};
template <class ...Aspects> dl(Aspects&&...) -> dl<Aspects...>;

template <class ...Aspects> struct div: public element<"div", ::ht::interface::HTMLDivElement, Aspects...> {
    using element<"div", ::ht::interface::HTMLDivElement, Aspects...>::element;
};
template <class ...Aspects> div(Aspects&&...) -> div<Aspects...>;

template <class ...Aspects> struct a: public element<"a", ::ht::interface::HTMLAnchorElement, Aspects...> {
    using element<"a", ::ht::interface::HTMLAnchorElement, Aspects...>::element;
};
template <class ...Aspects> a(Aspects&&...) -> a<Aspects...>;

template <class ...Aspects> struct data: public element<"data", ::ht::interface::HTMLDataElement, Aspects...> {
    using element<"data", ::ht::interface::HTMLDataElement, Aspects...>::element;
};
template <class ...Aspects> data(Aspects&&...) -> data<Aspects...>;

template <class ...Aspects> struct time: public element<"time", ::ht::interface::HTMLTimeElement, Aspects...> {
    using element<"time", ::ht::interface::HTMLTimeElement, Aspects...>::element;
};
template <class ...Aspects> time(Aspects&&...) -> time<Aspects...>;

template <class ...Aspects> struct span: public element<"span", ::ht::interface::HTMLSpanElement, Aspects...> {
    using element<"span", ::ht::interface::HTMLSpanElement, Aspects...>::element;
};
template <class ...Aspects> span(Aspects&&...) -> span<Aspects...>;

template <class ...Aspects> struct br: public element<"br", ::ht::interface::HTMLBRElement, Aspects...> {
    using element<"br", ::ht::interface::HTMLBRElement, Aspects...>::element;
};
template <class ...Aspects> br(Aspects&&...) -> br<Aspects...>;

template <class ...Aspects> struct ins: public element<"ins", ::ht::interface::HTMLModElement, Aspects...> {
    using element<"ins", ::ht::interface::HTMLModElement, Aspects...>::element;
};
template <class ...Aspects> ins(Aspects&&...) -> ins<Aspects...>;

template <class ...Aspects> struct del: public element<"del", ::ht::interface::HTMLModElement, Aspects...> {
    using element<"del", ::ht::interface::HTMLModElement, Aspects...>::element;
};
template <class ...Aspects> del(Aspects&&...) -> del<Aspects...>;

template <class ...Aspects> struct picture: public element<"picture", ::ht::interface::HTMLPictureElement, Aspects...> {
    using element<"picture", ::ht::interface::HTMLPictureElement, Aspects...>::element;
};
template <class ...Aspects> picture(Aspects&&...) -> picture<Aspects...>;

template <class ...Aspects> struct source: public element<"source", ::ht::interface::HTMLSourceElement, Aspects...> {
    using element<"source", ::ht::interface::HTMLSourceElement, Aspects...>::element;
};
template <class ...Aspects> source(Aspects&&...) -> source<Aspects...>;

template <class ...Aspects> struct img: public element<"img", ::ht::interface::HTMLImageElement, Aspects...> {
    using element<"img", ::ht::interface::HTMLImageElement, Aspects...>::element;
};
template <class ...Aspects> img(Aspects&&...) -> img<Aspects...>;

template <class ...Aspects> struct iframe: public element<"iframe", ::ht::interface::HTMLIFrameElement, Aspects...> {
    using element<"iframe", ::ht::interface::HTMLIFrameElement, Aspects...>::element;
};
template <class ...Aspects> iframe(Aspects&&...) -> iframe<Aspects...>;

template <class ...Aspects> struct embed: public element<"embed", ::ht::interface::HTMLEmbedElement, Aspects...> {
    using element<"embed", ::ht::interface::HTMLEmbedElement, Aspects...>::element;
};
template <class ...Aspects> embed(Aspects&&...) -> embed<Aspects...>;

template <class ...Aspects> struct object: public element<"object", ::ht::interface::HTMLObjectElement, Aspects...> {
    using element<"object", ::ht::interface::HTMLObjectElement, Aspects...>::element;
};
template <class ...Aspects> object(Aspects&&...) -> object<Aspects...>;

template <class ...Aspects> struct video: public element<"video", ::ht::interface::HTMLVideoElement, Aspects...> {
    using element<"video", ::ht::interface::HTMLVideoElement, Aspects...>::element;
};
template <class ...Aspects> video(Aspects&&...) -> video<Aspects...>;

template <class ...Aspects> struct audio: public element<"audio", ::ht::interface::HTMLAudioElement, Aspects...> {
    using element<"audio", ::ht::interface::HTMLAudioElement, Aspects...>::element;
};
template <class ...Aspects> audio(Aspects&&...) -> audio<Aspects...>;

template <class ...Aspects> struct map: public element<"map", ::ht::interface::HTMLMapElement, Aspects...> {
    using element<"map", ::ht::interface::HTMLMapElement, Aspects...>::element;
};
template <class ...Aspects> map(Aspects&&...) -> map<Aspects...>;

template <class ...Aspects> struct area: public element<"area", ::ht::interface::HTMLAreaElement, Aspects...> {
    using element<"area", ::ht::interface::HTMLAreaElement, Aspects...>::element;
};
template <class ...Aspects> area(Aspects&&...) -> area<Aspects...>;

template <class ...Aspects> struct table: public element<"table", ::ht::interface::HTMLTableElement, Aspects...> {
    using element<"table", ::ht::interface::HTMLTableElement, Aspects...>::element;
};
template <class ...Aspects> table(Aspects&&...) -> table<Aspects...>;

template <class ...Aspects> struct caption: public element<"caption", ::ht::interface::HTMLTableCaptionElement, Aspects...> {
    using element<"caption", ::ht::interface::HTMLTableCaptionElement, Aspects...>::element;
};
template <class ...Aspects> caption(Aspects&&...) -> caption<Aspects...>;

template <class ...Aspects> struct colgroup: public element<"colgroup", ::ht::interface::HTMLTableColElement, Aspects...> {
    using element<"colgroup", ::ht::interface::HTMLTableColElement, Aspects...>::element;
};
template <class ...Aspects> colgroup(Aspects&&...) -> colgroup<Aspects...>;

template <class ...Aspects> struct col: public element<"col", ::ht::interface::HTMLTableColElement, Aspects...> {
    using element<"col", ::ht::interface::HTMLTableColElement, Aspects...>::element;
};
template <class ...Aspects> col(Aspects&&...) -> col<Aspects...>;

template <class ...Aspects> struct tbody: public element<"tbody", ::ht::interface::HTMLTableSectionElement, Aspects...> {
    using element<"tbody", ::ht::interface::HTMLTableSectionElement, Aspects...>::element;
};
template <class ...Aspects> tbody(Aspects&&...) -> tbody<Aspects...>;

template <class ...Aspects> struct thead: public element<"thead", ::ht::interface::HTMLTableSectionElement, Aspects...> {
    using element<"thead", ::ht::interface::HTMLTableSectionElement, Aspects...>::element;
};
template <class ...Aspects> thead(Aspects&&...) -> thead<Aspects...>;

template <class ...Aspects> struct tfoot: public element<"tfoot", ::ht::interface::HTMLTableSectionElement, Aspects...> {
    using element<"tfoot", ::ht::interface::HTMLTableSectionElement, Aspects...>::element;
};
template <class ...Aspects> tfoot(Aspects&&...) -> tfoot<Aspects...>;

template <class ...Aspects> struct tr: public element<"tr", ::ht::interface::HTMLTableRowElement, Aspects...> {
    using element<"tr", ::ht::interface::HTMLTableRowElement, Aspects...>::element;
};
template <class ...Aspects> tr(Aspects&&...) -> tr<Aspects...>;

template <class ...Aspects> struct td: public element<"td", ::ht::interface::HTMLTableCellElement, Aspects...> {
    using element<"td", ::ht::interface::HTMLTableCellElement, Aspects...>::element;
};
template <class ...Aspects> td(Aspects&&...) -> td<Aspects...>;

template <class ...Aspects> struct th: public element<"th", ::ht::interface::HTMLTableCellElement, Aspects...> {
    using element<"th", ::ht::interface::HTMLTableCellElement, Aspects...>::element;
};
template <class ...Aspects> th(Aspects&&...) -> th<Aspects...>;

template <class ...Aspects> struct form: public element<"form", ::ht::interface::HTMLFormElement, Aspects...> {
    using element<"form", ::ht::interface::HTMLFormElement, Aspects...>::element;
};
template <class ...Aspects> form(Aspects&&...) -> form<Aspects...>;

template <class ...Aspects> struct label: public element<"label", ::ht::interface::HTMLLabelElement, Aspects...> {
    using element<"label", ::ht::interface::HTMLLabelElement, Aspects...>::element;
};
template <class ...Aspects> label(Aspects&&...) -> label<Aspects...>;

template <class ...Aspects> struct input: public element<"input", ::ht::interface::HTMLInputElement, Aspects...> {
    using element<"input", ::ht::interface::HTMLInputElement, Aspects...>::element;
};
template <class ...Aspects> input(Aspects&&...) -> input<Aspects...>;

template <class ...Aspects> struct button: public element<"button", ::ht::interface::HTMLButtonElement, Aspects...> {
    using element<"button", ::ht::interface::HTMLButtonElement, Aspects...>::element;
};
template <class ...Aspects> button(Aspects&&...) -> button<Aspects...>;

template <class ...Aspects> struct select: public element<"select", ::ht::interface::HTMLSelectElement, Aspects...> {
    using element<"select", ::ht::interface::HTMLSelectElement, Aspects...>::element;
};
template <class ...Aspects> select(Aspects&&...) -> select<Aspects...>;

template <class ...Aspects> struct datalist: public element<"datalist", ::ht::interface::HTMLDataListElement, Aspects...> {
    using element<"datalist", ::ht::interface::HTMLDataListElement, Aspects...>::element;
};
template <class ...Aspects> datalist(Aspects&&...) -> datalist<Aspects...>;

template <class ...Aspects> struct optgroup: public element<"optgroup", ::ht::interface::HTMLOptGroupElement, Aspects...> {
    using element<"optgroup", ::ht::interface::HTMLOptGroupElement, Aspects...>::element;
};
template <class ...Aspects> optgroup(Aspects&&...) -> optgroup<Aspects...>;

template <class ...Aspects> struct option: public element<"option", ::ht::interface::HTMLOptionElement, Aspects...> {
    using element<"option", ::ht::interface::HTMLOptionElement, Aspects...>::element;
};
template <class ...Aspects> option(Aspects&&...) -> option<Aspects...>;

template <class ...Aspects> struct textarea: public element<"textarea", ::ht::interface::HTMLTextAreaElement, Aspects...> {
    using element<"textarea", ::ht::interface::HTMLTextAreaElement, Aspects...>::element;
};
template <class ...Aspects> textarea(Aspects&&...) -> textarea<Aspects...>;

template <class ...Aspects> struct output: public element<"output", ::ht::interface::HTMLOutputElement, Aspects...> {
    using element<"output", ::ht::interface::HTMLOutputElement, Aspects...>::element;
};
template <class ...Aspects> output(Aspects&&...) -> output<Aspects...>;

template <class ...Aspects> struct progress: public element<"progress", ::ht::interface::HTMLProgressElement, Aspects...> {
    using element<"progress", ::ht::interface::HTMLProgressElement, Aspects...>::element;
};
template <class ...Aspects> progress(Aspects&&...) -> progress<Aspects...>;

template <class ...Aspects> struct meter: public element<"meter", ::ht::interface::HTMLMeterElement, Aspects...> {
    using element<"meter", ::ht::interface::HTMLMeterElement, Aspects...>::element;
};
template <class ...Aspects> meter(Aspects&&...) -> meter<Aspects...>;

template <class ...Aspects> struct fieldset: public element<"fieldset", ::ht::interface::HTMLFieldSetElement, Aspects...> {
    using element<"fieldset", ::ht::interface::HTMLFieldSetElement, Aspects...>::element;
};
template <class ...Aspects> fieldset(Aspects&&...) -> fieldset<Aspects...>;

template <class ...Aspects> struct legend: public element<"legend", ::ht::interface::HTMLLegendElement, Aspects...> {
    using element<"legend", ::ht::interface::HTMLLegendElement, Aspects...>::element;
};
template <class ...Aspects> legend(Aspects&&...) -> legend<Aspects...>;

template <class ...Aspects> struct details: public element<"details", ::ht::interface::HTMLDetailsElement, Aspects...> {
    using element<"details", ::ht::interface::HTMLDetailsElement, Aspects...>::element;
};
template <class ...Aspects> details(Aspects&&...) -> details<Aspects...>;

template <class ...Aspects> struct dialog: public element<"dialog", ::ht::interface::HTMLDialogElement, Aspects...> {
    using element<"dialog", ::ht::interface::HTMLDialogElement, Aspects...>::element;
};
template <class ...Aspects> dialog(Aspects&&...) -> dialog<Aspects...>;

template <class ...Aspects> struct script: public element<"script", ::ht::interface::HTMLScriptElement, Aspects...> {
    using element<"script", ::ht::interface::HTMLScriptElement, Aspects...>::element;
};
template <class ...Aspects> script(Aspects&&...) -> script<Aspects...>;

template <class ...Aspects> struct slot: public element<"slot", ::ht::interface::HTMLSlotElement, Aspects...> {
    using element<"slot", ::ht::interface::HTMLSlotElement, Aspects...>::element;
};
template <class ...Aspects> slot(Aspects&&...) -> slot<Aspects...>;

template <class ...Aspects> struct canvas: public element<"canvas", ::ht::interface::HTMLCanvasElement, Aspects...> {
    using element<"canvas", ::ht::interface::HTMLCanvasElement, Aspects...>::element;
};
template <class ...Aspects> canvas(Aspects&&...) -> canvas<Aspects...>;

template <class ...Aspects> struct applet: public element<"applet", ::ht::interface::HTMLUnknownElement, Aspects...> {
    using element<"applet", ::ht::interface::HTMLUnknownElement, Aspects...>::element;
};
template <class ...Aspects> applet(Aspects&&...) -> applet<Aspects...>;

template <class ...Aspects> struct bgsound: public element<"bgsound", ::ht::interface::HTMLUnknownElement, Aspects...> {
    using element<"bgsound", ::ht::interface::HTMLUnknownElement, Aspects...>::element;
};
template <class ...Aspects> bgsound(Aspects&&...) -> bgsound<Aspects...>;

template <class ...Aspects> struct isindex: public element<"isindex", ::ht::interface::HTMLUnknownElement, Aspects...> {
    using element<"isindex", ::ht::interface::HTMLUnknownElement, Aspects...>::element;
};
template <class ...Aspects> isindex(Aspects&&...) -> isindex<Aspects...>;

template <class ...Aspects> struct keygen: public element<"keygen", ::ht::interface::HTMLUnknownElement, Aspects...> {
    using element<"keygen", ::ht::interface::HTMLUnknownElement, Aspects...>::element;
};
template <class ...Aspects> keygen(Aspects&&...) -> keygen<Aspects...>;

template <class ...Aspects> struct nextid: public element<"nextid", ::ht::interface::HTMLUnknownElement, Aspects...> {
    using element<"nextid", ::ht::interface::HTMLUnknownElement, Aspects...>::element;
};
template <class ...Aspects> nextid(Aspects&&...) -> nextid<Aspects...>;

template <class ...Aspects> struct blink: public element<"blink", ::ht::interface::HTMLUnknownElement, Aspects...> {
    using element<"blink", ::ht::interface::HTMLUnknownElement, Aspects...>::element;
};
template <class ...Aspects> blink(Aspects&&...) -> blink<Aspects...>;

template <class ...Aspects> struct multicol: public element<"multicol", ::ht::interface::HTMLUnknownElement, Aspects...> {
    using element<"multicol", ::ht::interface::HTMLUnknownElement, Aspects...>::element;
};
template <class ...Aspects> multicol(Aspects&&...) -> multicol<Aspects...>;

template <class ...Aspects> struct spacer: public element<"spacer", ::ht::interface::HTMLUnknownElement, Aspects...> {
    using element<"spacer", ::ht::interface::HTMLUnknownElement, Aspects...>::element;
};
template <class ...Aspects> spacer(Aspects&&...) -> spacer<Aspects...>;

template <class ...Aspects> struct dir: public element<"dir", ::ht::interface::HTMLDirectoryElement, Aspects...> {
    using element<"dir", ::ht::interface::HTMLDirectoryElement, Aspects...>::element;
};
template <class ...Aspects> dir(Aspects&&...) -> dir<Aspects...>;

template <class ...Aspects> struct frame: public element<"frame", ::ht::interface::HTMLFrameElement, Aspects...> {
    using element<"frame", ::ht::interface::HTMLFrameElement, Aspects...>::element;
};
template <class ...Aspects> frame(Aspects&&...) -> frame<Aspects...>;

template <class ...Aspects> struct frameset: public element<"frameset", ::ht::interface::HTMLFrameSetElement, Aspects...> {
    using element<"frameset", ::ht::interface::HTMLFrameSetElement, Aspects...>::element;
};
template <class ...Aspects> frameset(Aspects&&...) -> frameset<Aspects...>;

template <class ...Aspects> struct param: public element<"param", ::ht::interface::HTMLParamElement, Aspects...> {
    using element<"param", ::ht::interface::HTMLParamElement, Aspects...>::element;
};
template <class ...Aspects> param(Aspects&&...) -> param<Aspects...>;

template <class ...Aspects> struct font: public element<"font", ::ht::interface::HTMLFontElement, Aspects...> {
    using element<"font", ::ht::interface::HTMLFontElement, Aspects...>::element;
};
template <class ...Aspects> font(Aspects&&...) -> font<Aspects...>;

template <class ...Aspects> struct marquee: public element<"marquee", ::ht::interface::HTMLMarqueeElement, Aspects...> {
    using element<"marquee", ::ht::interface::HTMLMarqueeElement, Aspects...>::element;
};
template <class ...Aspects> marquee(Aspects&&...) -> marquee<Aspects...>;

